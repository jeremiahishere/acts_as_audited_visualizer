<div class="content">This is the audit history<br /></div>
<script type="text/paperscript" canvas="visualization_canvas">

  //var path = new Path.Circle(view.center, 30);
  //path.strokeColor = 'black';
  var fill_colors = new Array("blue", "red", "green", "yellow");
  var paths = new Array();
  var destinations = new Array();
  var num_paths = 40;
  for(var i = 0; i < num_paths; i++)  {
    // Create a circle shaped path with its center near the center
    // of the view and a radius of something near 30
    path = new Path.Circle(view.center + i, i);
    path.strokeColor = fill_colors[i % 4]; 
    path.fillColor = fill_colors[i % 4];
    paths.push(path);
    
    // Define a random point in the view, which we will be moving
    // the text item towards.
    destinations.push(Point.random() * view.size);
  }

  function onFrame(event) {
    for(var i = 0; i < num_paths; i++)  {
      // Each frame, move the path 1/30th of the difference in position
      // between it and the destination.

      // The vector is the difference between the position of
      // the text item and the destination point:
      var vector = destinations[i] - paths[i].position;

      // We add 1/30th of the vector to the position property
      // of the text item, to move it in the direction of the
      // destination point:
      paths[i].position += vector / 30;

      // If the distance between the path and the destination is less
      // than 5, we define a new random point in the view to move the
      // path to:
      if (vector.length < 5) {
        var found_a_match = false;
        while(found_a_match == false)  {
          var potential_match = Math.floor(Math.random() * num_paths)
          //check if the randomly generated target matches the color of the current
          if(paths[potential_match].style.fillColor == paths[i].style.fillColor)  {
            //set the destination
            destinations[i] = new Point(paths[potential_match].bounds.x, paths[potential_match].bounds.y);
            //hack to move to random point if we go out of bounds
            if(destinations[i].x < 0 || destinations[i].y < 0)  {
              destinations[i] = Point.random() * view.size;
            }
            //found a match so stop looping
            found_a_match = true;
          }
        }
      }

    }
  }
</script>
<canvas id="visualization_canvas" resize>
</canvas>

<script>
$(document).ready(function()  {
  var last_update_timestamp = 0;

  //update the canvas with an ajax call to the controller
  function update_audits()  {
    timestamp = self.last_update_timestamp
    $.ajax({
      url: "/acts_as_audited_visualizer/update_audits/" + timestamp,
      dataType: "json",
      success: function(json)  {
        self.last_update_timestamp = Number(new Date());
        //add the new data to the content div
        inner_html = $('.content').html();
        inner_html += audit_to_s(json);
        $('.content').html(inner_html);
      }
    });
  }

  //convert input from the ajax call into tags
  function audit_to_s(audit) {
    output = "";
    $.each(audit, function(id, audit_group)  {
      output += "<div id='audit_group_" + id + "' class='audit_group'>";
      $.each(audit_group, function(key, value)  {
        output += "<span id='" + value.model + "-" + value.id + "' class='content_audit'>";
        output += value.model + "<br />" + value.name + "<br />";
        output += "</span>";
      });
      output += "</div>";
    });
    return output
  }

  //update the canvas every few seconds
  function start_updating() {
    setInterval(update_audits, 10000);
  }  

  //get initial canvas
  update_audits();
  setTimeout(start_updating, 2000);
});
</script>
