<script type='text/javascript'>
//to be available to paperscript, things need to be outside the document ready
var audits = {};
$(document).ready(function()  {
  var last_update_timestamp = 0;

  function get_audits()  {
    return audits;
  }

  //update the canvas with an ajax call to the controller
  function update_audits()  {
    timestamp = self.last_update_timestamp
    $.ajax({
      url: "/acts_as_audited_visualizer/update_audits/" + timestamp,
      dataType: "json",
      success: function(json)  {
        self.last_update_timestamp = Number(new Date());
        //add the new data to the content div
        audits = $.extend(audits, json);
      }
    });
  }

  //update the canvas every few seconds
  function start_updating() {
    setInterval(update_audits, 10000);
  }  

  //get initial canvas
  update_audits();
  setTimeout(start_updating, 2000);
});
</script>
<script type="text/paperscript" canvas="visualization_canvas">
  //create a background the size of the canvas
  var background = new Path.Rectangle(view.bounds);
  background.fillColor = 'black';

  //list of audit objects that have been converted for paperscript
  var audit_list = new Array();
  //list of model objects that have veen converted for paperscript
  var model_list = new Array();

  function audit_already_exists(audit_id)  {
    for(var i = 0; i < audit_list.length; i++)  {
      if(audit_list[i].audit_id == audit_id)  {
        return true;
      }
    }
    return false;
  }

  function find_or_create_model(new_model)  {
    for(var i = 0; i < model_list.length; i++)  {
      if(model_list[i].is_self(new_model))  {
        return model_list[i]
      }
    }
    model = new Model(new_model);
    model_list.push(model);
    return model;
  }

  function onFrame(event) {
    for(var key in audits)  {
      if(!audit_already_exists(key))  {
        new_audit = new Audit(key)
        for(var i = 0; i < audits[key].length; i++)  {
          new_model = audits[key][i];
          model = find_or_create_model(new_model);
          new_audit.add_model(model);
        }
        audit_list.push(new_audit);
      }
    }
  }

  function onMouseDown(event)  {
  }

  //stores an audit and all of its associated models
  var Audit = Base.extend({
    audit_id: 0,
    initialize: function(audit_id)  {
      this.audit_id = audit_id;
      this.models = new Array;
    },
    add_model: function(model)  {
      for(var i = 0; i < this.models.length; i++)  {
        connection = new Connection(this.models[i], model);
      }
      this.models.push(model);
    }
  });

  var Connection = Base.extend({
    initialize: function(start, end)  {
      this.connection = new Path();
      this.connection.strokeColor = "white";
      this.start = start;
      this.end = end;

      start_point = start.add_connection(this);
      end_point = end.add_connection(this);

      this.connection.add(start_point);
      this.connection.add(end_point);
    },
  });

  //stores a model that isn't an audit and links it to the audits
  var Model = Base.extend({
    model_id: 0,
    model_type: "",
    initialize: function(model_obj)  {
      this.model_id = model_obj.id;
      this.model_type = model_obj.model;

      size = (Math.random() * 25) + 25;
      this.shape = new Path.Circle(Point.random() * view.size, size);
      this.shape.strokeColor = "white";
      this.shape.fillColor = "green";

      this.title_text = new PointText(this.shape.position);
      this.title_text.paragraphStyle.justification = 'center';
      this.title_text.characterStyle.fontSize = Math.ceil(size / 5);
      this.title_text.fillColor = 'white';
      this.title_text.content = this.model_type + ": " + model_obj.name;

      this.connections = new Array;
    },
    is_self: function(model)  {
      return (model.model == this.model_type && model.id == this.model_id);
    },
    add_connection: function(path)  {
      this.connections.push(path);
      return this.shape.position;
    },
  });
</script>
<canvas id="visualization_canvas" resize>
</canvas>

