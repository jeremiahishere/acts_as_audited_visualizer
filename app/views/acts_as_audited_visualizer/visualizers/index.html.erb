<div class="content">This is the audit history<br /></div>
<script type="text/paperscript" canvas="visualization_canvas">

  var RandomMoverGroup = Base.extend({
    initialize: function(num_paths)  {
      this.num_fill_colors = 6;
      this.fill_colors = new Array("blue", "red", "green", "yellow", "purple", "orange");
      this.movers = [];
      this.num_paths = num_paths
      for(var i = 0; i < this.num_paths; i++)  {
        var color = this.fill_colors[i % this.num_fill_colors]
        this.movers.push(new Mover(color, i));
      }
    },
    update_positions: function()  {
      for(var i = 0; i < this.num_paths; i++)  {
        var mover = this.movers[i];
        var vector = mover.move_to_destination();

        if (vector.length < 5) {
          var found_a_match = false;
          while(found_a_match == false)  {
            var potential_match = Math.floor(Math.random() * this.num_paths)
            match = this.movers[potential_match];
            //check if the randomly generated target matches the color of the current
            if(match.path.style.fillColor == mover.path.style.fillColor)  {
              //set the destination
              mover.destination = new Point(match.path.bounds.x,  match.path.bounds.y);
              //hack to move to random point if we go out of bounds
              if(mover.destination.x < 0 || mover.destination.y < 0)  {
                mover.destination = Point.random() * view.size;
              }
              //found a match so stop looping
              found_a_match = true;
            }
          }
          mover.randomize_rotate_speed();
        } else {
          mover.update_rotation();
        }
      }
    },
  });

  var Mover = Base.extend({
    initialize: function(color, num)  {
      //path = new Path.Circle(view.center + i, i);
      this.path = new Path.RegularPolygon(view.center + num, (num % 10) + 3, num);
      this.path.strokeColor = "white";
      this.path.fillColor = color;

      this.text = new PointText(this.path.position);
      this.text.paragraphStyle.justification = 'center';
      this.text.characterStyle.fontSize = num/2;
      this.text.fillColor = 'white';
      this.text.content = num;

      this.destination = Point.random() * view.size;
      this.randomize_rotate_speed();
    },
    randomize_rotate_speed: function()  {
      this.rotate_speed = (Math.random() * 20) - 10;
    },
    update_rotation: function()  {
      this.path.rotate(this.rotate_speed);
    },
    move_to_destination: function()  {
      vector = this.destination - this.path.position;
      this.path.position += vector / 30;
      this.text.position += vector / 30;
      return vector;
    },
  });

  mover_group = new RandomMoverGroup(60);

  function onFrame(event) {
    mover_group.update_positions();
  }
</script>
<canvas id="visualization_canvas" resize>
</canvas>

<script>
$(document).ready(function()  {
  var last_update_timestamp = 0;

  //update the canvas with an ajax call to the controller
  function update_audits()  {
    timestamp = self.last_update_timestamp
    $.ajax({
      url: "/acts_as_audited_visualizer/update_audits/" + timestamp,
      dataType: "json",
      success: function(json)  {
        self.last_update_timestamp = Number(new Date());
        //add the new data to the content div
        inner_html = $('.content').html();
        inner_html += audit_to_s(json);
        $('.content').html(inner_html);
      }
    });
  }

  //convert input from the ajax call into tags
  function audit_to_s(audit) {
    output = "";
    $.each(audit, function(id, audit_group)  {
      output += "<div id='audit_group_" + id + "' class='audit_group'>";
      $.each(audit_group, function(key, value)  {
        output += "<span id='" + value.model + "-" + value.id + "' class='content_audit'>";
        output += value.model + "<br />" + value.name + "<br />";
        output += "</span>";
      });
      output += "</div>";
    });
    return output
  }

  //update the canvas every few seconds
  function start_updating() {
    setInterval(update_audits, 10000);
  }  

  //get initial canvas
  update_audits();
  setTimeout(start_updating, 2000);
});
</script>
